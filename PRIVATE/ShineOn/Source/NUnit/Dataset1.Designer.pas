//------------------------------------------------------------------------------
// <autogenerated>
//     This Oxygene source code was generated by a tool.
//     Oxygene Version: 3.0.13.521
//     Runtime Version: 2.0.50727.3053
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
{$HIDE CW3}
{$HIDE PW12}

namespace NUnit.ShineOn.RTL;

interface

type
    /// <summary>
    /// Represents a strongly typed in-memory cache of data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute('System.Data.Design.TypedDataSetGenerator', '2.0.0.0')]
    [System.Serializable]
    [System.ComponentModel.DesignerCategoryAttribute('code')]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute('GetTypedDataSetSchema')]
    [System.Xml.Serialization.XmlRootAttribute('Dataset1')]
    [System.ComponentModel.Design.HelpKeywordAttribute('vs.data.DataSet')]
    Dataset1 = public partial class(System.Data.DataSet)
        private 
            var tableDataTable1: DataTable1DataTable;
            method get_DataTable1: DataTable1DataTable;
            var _schemaSerializationMode: System.Data.SchemaSerializationMode := System.Data.SchemaSerializationMode.IncludeSchema;
            method get_SchemaSerializationMode: System.Data.SchemaSerializationMode;
            method set_SchemaSerializationMode(value: System.Data.SchemaSerializationMode);
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method InitClass;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method ShouldSerializeDataTable1: System.Boolean;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method SchemaChanged(sender: System.Object; e: System.ComponentModel.CollectionChangeEventArgs);
            method get_Tables: System.Data.DataTableCollection;
            method get_Relations: System.Data.DataRelationCollection;
        assembly 
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method InitVars;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method InitVars(initTable: System.Boolean);
        protected 
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            constructor(info: System.Runtime.Serialization.SerializationInfo; context: System.Runtime.Serialization.StreamingContext);
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method InitializeDerivedDataSet; override;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method ShouldSerializeTables: System.Boolean; override;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method ShouldSerializeRelations: System.Boolean; override;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method ReadXmlSerializable(reader: System.Xml.XmlReader); override;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method GetSchemaSerializable: System.Xml.Schema.XmlSchema; override;
        public 
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            [System.ComponentModel.Browsable(false)]
            [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
            property DataTable1: DataTable1DataTable read get_DataTable1;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            [System.ComponentModel.BrowsableAttribute(true)]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
            property SchemaSerializationMode: System.Data.SchemaSerializationMode read get_SchemaSerializationMode write set_SchemaSerializationMode; override;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            constructor;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method Clone: System.Data.DataSet; override;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            class method GetTypedDataSetSchema(xs: System.Xml.Schema.XmlSchemaSet): System.Xml.Schema.XmlSchemaComplexType;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            property Tables: System.Data.DataTableCollection read get_Tables; reintroduce;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            property Relations: System.Data.DataRelationCollection read get_Relations; reintroduce;
    end;
    
    DataTable1RowChangeEventHandler nested in Dataset1  = public delegate (sender: System.Object; e: DataTable1RowChangeEvent);
    
    /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute('System.Data.Design.TypedDataSetGenerator', '2.0.0.0')]
    [System.Serializable]
    [System.Xml.Serialization.XmlSchemaProviderAttribute('GetTypedTableSchema')]
    DataTable1DataTable nested in Dataset1  = public partial class(System.Data.DataTable, System.Collections.IEnumerable)
        private 
            var columnID: System.Data.DataColumn;
            var columnName: System.Data.DataColumn;
            var columnDescription: System.Data.DataColumn;
            method get_IDColumn: System.Data.DataColumn;
            method get_NameColumn: System.Data.DataColumn;
            method get_DescriptionColumn: System.Data.DataColumn;
            method get_Count: System.Int32;
            method get_Item(&index: System.Int32): DataTable1Row;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method InitClass;
        assembly 
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            constructor(table: System.Data.DataTable);
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method InitVars;
        protected 
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            constructor(info: System.Runtime.Serialization.SerializationInfo; context: System.Runtime.Serialization.StreamingContext);
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method CreateInstance: System.Data.DataTable; override;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method NewRowFromBuilder(builder: System.Data.DataRowBuilder): System.Data.DataRow; override;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method GetRowType: System.Type; override;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method OnRowChanged(e: System.Data.DataRowChangeEventArgs); override;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method OnRowChanging(e: System.Data.DataRowChangeEventArgs); override;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method OnRowDeleted(e: System.Data.DataRowChangeEventArgs); override;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method OnRowDeleting(e: System.Data.DataRowChangeEventArgs); override;
        public 
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            property IDColumn: System.Data.DataColumn read get_IDColumn;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            property NameColumn: System.Data.DataColumn read get_NameColumn;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            property DescriptionColumn: System.Data.DataColumn read get_DescriptionColumn;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            [System.ComponentModel.Browsable(false)]
            property Count: System.Int32 read get_Count;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            property Item[&index: System.Int32]: DataTable1Row read get_Item; default;
            event DataTable1RowChanging: DataTable1RowChangeEventHandler;
            event DataTable1RowChanged: DataTable1RowChangeEventHandler;
            event DataTable1RowDeleting: DataTable1RowChangeEventHandler;
            event DataTable1RowDeleted: DataTable1RowChangeEventHandler;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            constructor;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method AddDataTable1Row(row: DataTable1Row);
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method AddDataTable1Row(ID: System.Int32; Name: System.String; Description: System.String): DataTable1Row;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method FindByID(ID: System.Int32): DataTable1Row;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method GetEnumerator: System.Collections.IEnumerator; virtual;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method Clone: System.Data.DataTable; override;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method NewDataTable1Row: DataTable1Row;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method RemoveDataTable1Row(row: DataTable1Row);
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            class method GetTypedTableSchema(xs: System.Xml.Schema.XmlSchemaSet): System.Xml.Schema.XmlSchemaComplexType;
    end;
    
    /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute('System.Data.Design.TypedDataSetGenerator', '2.0.0.0')]
    DataTable1Row nested in Dataset1  = public partial class(System.Data.DataRow)
        private 
            var tableDataTable1: DataTable1DataTable;
            method get_ID: System.Int32;
            method set_ID(value: System.Int32);
            method get_Name: System.String;
            method set_Name(value: System.String);
            method get_Description: System.String;
            method set_Description(value: System.String);
        assembly 
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            constructor(rb: System.Data.DataRowBuilder);
        public 
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            property ID: System.Int32 read get_ID write set_ID;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            property Name: System.String read get_Name write set_Name;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method IsNameNull: System.Boolean;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method SetNameNull;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            property Description: System.String read get_Description write set_Description;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method IsDescriptionNull: System.Boolean;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            method SetDescriptionNull;
    end;
    
    /// <summary>
    /// Row event argument class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute('System.Data.Design.TypedDataSetGenerator', '2.0.0.0')]
    DataTable1RowChangeEvent nested in Dataset1  = public class(System.EventArgs)
        private 
            var eventRow: DataTable1Row;
            var eventAction: System.Data.DataRowAction;
            method get_Row: DataTable1Row;
            method get_Action: System.Data.DataRowAction;
        public 
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            constructor(row: DataTable1Row; action: System.Data.DataRowAction);
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            property Row: DataTable1Row read get_Row;
            [System.Diagnostics.DebuggerNonUserCodeAttribute]
            property Action: System.Data.DataRowAction read get_Action;
    end;
    
implementation

{ Dataset1 }

method Dataset1.get_DataTable1: DataTable1DataTable;
begin
    exit(self.tableDataTable1);
end;

method Dataset1.get_SchemaSerializationMode: System.Data.SchemaSerializationMode;
begin
    exit(self._schemaSerializationMode);
end;

method Dataset1.set_SchemaSerializationMode(value: System.Data.SchemaSerializationMode);
begin
    self._schemaSerializationMode := value;
end;

constructor Dataset1;
begin
    self.BeginInit();
    self.InitClass();
    var schemaChangedHandler: System.ComponentModel.CollectionChangeEventHandler := new System.ComponentModel.CollectionChangeEventHandler(@self.SchemaChanged);
    inherited Tables.CollectionChanged += schemaChangedHandler;
    inherited Relations.CollectionChanged += schemaChangedHandler;
    self.EndInit();
end;

constructor Dataset1(info: System.Runtime.Serialization.SerializationInfo; context: System.Runtime.Serialization.StreamingContext);
begin
    inherited constructor(info, context, false);
    if (self.IsBinarySerialized(info, context) = true) then begin
        self.InitVars(false);
        var schemaChangedHandler1: System.ComponentModel.CollectionChangeEventHandler := new System.ComponentModel.CollectionChangeEventHandler(@self.SchemaChanged);
        self.Tables.CollectionChanged += schemaChangedHandler1;
        self.Relations.CollectionChanged += schemaChangedHandler1;
        exit;
    end;
    var strSchema: System.String := (info.GetValue('XmlSchema', typeOf(System.String)) as System.String);
    if (self.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) then begin
        var ds: System.Data.DataSet := new System.Data.DataSet();
        ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
        if (ds.Tables['DataTable1'] <> nil) then begin
            inherited Tables.Add(new DataTable1DataTable(ds.Tables['DataTable1']));
        end;
        self.DataSetName := ds.DataSetName;
        self.Prefix := ds.Prefix;
        self.Namespace := ds.Namespace;
        self.Locale := ds.Locale;
        self.CaseSensitive := ds.CaseSensitive;
        self.EnforceConstraints := ds.EnforceConstraints;
        self.Merge(ds, false, System.Data.MissingSchemaAction.Add);
        self.InitVars();
    end
    else begin
        self.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
    end;
    self.GetSerializationData(info, context);
    var schemaChangedHandler: System.ComponentModel.CollectionChangeEventHandler := new System.ComponentModel.CollectionChangeEventHandler(@self.SchemaChanged);
    inherited Tables.CollectionChanged += schemaChangedHandler;
    self.Relations.CollectionChanged += schemaChangedHandler;
end;

method Dataset1.InitializeDerivedDataSet;
begin
    self.BeginInit();
    self.InitClass();
    self.EndInit();
end;

method Dataset1.Clone: System.Data.DataSet;
begin
    var cln: Dataset1 := (inherited Clone() as Dataset1);
    cln.InitVars();
    cln.SchemaSerializationMode := self.SchemaSerializationMode;
    exit(cln);
end;

method Dataset1.ShouldSerializeTables: System.Boolean;
begin
    exit(false);
end;

method Dataset1.ShouldSerializeRelations: System.Boolean;
begin
    exit(false);
end;

method Dataset1.ReadXmlSerializable(reader: System.Xml.XmlReader);
begin
    if (self.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) then begin
        self.Reset();
        var ds: System.Data.DataSet := new System.Data.DataSet();
        ds.ReadXml(reader);
        if (ds.Tables['DataTable1'] <> nil) then begin
            inherited Tables.Add(new DataTable1DataTable(ds.Tables['DataTable1']));
        end;
        self.DataSetName := ds.DataSetName;
        self.Prefix := ds.Prefix;
        self.Namespace := ds.Namespace;
        self.Locale := ds.Locale;
        self.CaseSensitive := ds.CaseSensitive;
        self.EnforceConstraints := ds.EnforceConstraints;
        self.Merge(ds, false, System.Data.MissingSchemaAction.Add);
        self.InitVars();
    end
    else begin
        self.ReadXml(reader);
        self.InitVars();
    end;
end;

method Dataset1.GetSchemaSerializable: System.Xml.Schema.XmlSchema;
begin
    var stream: System.IO.MemoryStream := new System.IO.MemoryStream();
    self.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, nil));
    stream.Position := 0;
    exit(System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), nil));
end;

method Dataset1.InitVars;
begin
    self.InitVars(true);
end;

method Dataset1.InitVars(initTable: System.Boolean);
begin
    self.tableDataTable1 := (inherited Tables['DataTable1'] as DataTable1DataTable);
    if (initTable = true) then begin
        if (self.tableDataTable1 <> nil) then begin
            self.tableDataTable1.InitVars();
        end;
    end;
end;

method Dataset1.InitClass;
begin
    self.DataSetName := 'Dataset1';
    self.Prefix := '';
    self.Namespace := 'http://tempuri.org/Dataset1.xsd';
    self.Locale := new System.Globalization.CultureInfo('en-US');
    self.EnforceConstraints := true;
    self.SchemaSerializationMode := System.Data.SchemaSerializationMode.IncludeSchema;
    self.tableDataTable1 := new DataTable1DataTable();
    inherited Tables.Add(self.tableDataTable1);
end;

method Dataset1.ShouldSerializeDataTable1: System.Boolean;
begin
    exit(false);
end;

method Dataset1.SchemaChanged(sender: System.Object; e: System.ComponentModel.CollectionChangeEventArgs);
begin
    if (e.Action = System.ComponentModel.CollectionChangeAction.Remove) then begin
        self.InitVars();
    end;
end;

class method Dataset1.GetTypedDataSetSchema(xs: System.Xml.Schema.XmlSchemaSet): System.Xml.Schema.XmlSchemaComplexType;
begin
    var ds: Dataset1 := new Dataset1();
    var &type: System.Xml.Schema.XmlSchemaComplexType := new System.Xml.Schema.XmlSchemaComplexType();
    var sequence: System.Xml.Schema.XmlSchemaSequence := new System.Xml.Schema.XmlSchemaSequence();
    var any: System.Xml.Schema.XmlSchemaAny := new System.Xml.Schema.XmlSchemaAny();
    any.Namespace := ds.Namespace;
    sequence.Items.Add(any);
    &type.Particle := sequence;
    var dsSchema: System.Xml.Schema.XmlSchema := ds.GetSchemaSerializable();
    if xs.Contains(dsSchema.TargetNamespace) then begin
        var s1: System.IO.MemoryStream := new System.IO.MemoryStream();
        var s2: System.IO.MemoryStream := new System.IO.MemoryStream();
        try
            var schema: System.Xml.Schema.XmlSchema := nil;
            dsSchema.Write(s1);
            var schemas: System.Collections.IEnumerator := xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
            ; 
            while schemas.MoveNext()do begin schema := (schemas.Current as System.Xml.Schema.XmlSchema);
                s2.SetLength(0);
                schema.Write(s2);
                if (s1.Length = s2.Length) then begin
                    s1.Position := 0;
                    s2.Position := 0;
                    ;
                    ; 
                    while ((s1.Position <> s1.Length) 
                                and (s1.ReadByte() = s2.ReadByte()))do begin ;
                        ;
                    end;
                    if (s1.Position = s1.Length) then begin
                        exit(&type);
                    end;
                end;
                ;
            end;
        finally
            if (s1 <> nil) then begin
                s1.Close();
            end;
            if (s2 <> nil) then begin
                s2.Close();
            end;
        end;
    end;
    xs.Add(dsSchema);
    exit(&type);
end;

method Dataset1.get_Tables: System.Data.DataTableCollection;
begin
    exit(inherited Tables);
end;

method Dataset1.get_Relations: System.Data.DataRelationCollection;
begin
    exit(inherited Relations);
end;

{ DataTable1DataTable }

method Dataset1.DataTable1DataTable.get_IDColumn: System.Data.DataColumn;
begin
    exit(self.columnID);
end;

method Dataset1.DataTable1DataTable.get_NameColumn: System.Data.DataColumn;
begin
    exit(self.columnName);
end;

method Dataset1.DataTable1DataTable.get_DescriptionColumn: System.Data.DataColumn;
begin
    exit(self.columnDescription);
end;

method Dataset1.DataTable1DataTable.get_Count: System.Int32;
begin
    exit(self.Rows.Count);
end;

method Dataset1.DataTable1DataTable.get_Item(&index: System.Int32): DataTable1Row;
begin
    exit((self.Rows[&index] as DataTable1Row));
end;

constructor Dataset1.DataTable1DataTable;
begin
    self.TableName := 'DataTable1';
    self.BeginInit();
    self.InitClass();
    self.EndInit();
end;

constructor Dataset1.DataTable1DataTable(table: System.Data.DataTable);
begin
    self.TableName := table.TableName;
    if (table.CaseSensitive <> table.DataSet.CaseSensitive) then begin
        self.CaseSensitive := table.CaseSensitive;
    end;
    if (table.Locale.ToString() <> table.DataSet.Locale.ToString()) then begin
        self.Locale := table.Locale;
    end;
    if (table.Namespace <> table.DataSet.Namespace) then begin
        self.Namespace := table.Namespace;
    end;
    self.Prefix := table.Prefix;
    self.MinimumCapacity := table.MinimumCapacity;
end;

constructor Dataset1.DataTable1DataTable(info: System.Runtime.Serialization.SerializationInfo; context: System.Runtime.Serialization.StreamingContext);
begin
    inherited constructor(info, context);
    self.InitVars();
end;

method Dataset1.DataTable1DataTable.AddDataTable1Row(row: DataTable1Row);
begin
    self.Rows.Add(row);
end;

method Dataset1.DataTable1DataTable.AddDataTable1Row(ID: System.Int32; Name: System.String; Description: System.String): DataTable1Row;
begin
    var rowDataTable1Row: DataTable1Row := (self.NewRow() as DataTable1Row);
    var columnValuesArray: array of System.Object := array of System.Object([ID,
        Name,
        Description]);
    rowDataTable1Row.ItemArray := columnValuesArray;
    self.Rows.Add(rowDataTable1Row);
    exit(rowDataTable1Row);
end;

method Dataset1.DataTable1DataTable.FindByID(ID: System.Int32): DataTable1Row;
begin
    exit((self.Rows.Find(array of System.Object([ID])) as DataTable1Row));
end;

method Dataset1.DataTable1DataTable.GetEnumerator: System.Collections.IEnumerator;
begin
    exit(self.Rows.GetEnumerator());
end;

method Dataset1.DataTable1DataTable.Clone: System.Data.DataTable;
begin
    var cln: DataTable1DataTable := (inherited Clone() as DataTable1DataTable);
    cln.InitVars();
    exit(cln);
end;

method Dataset1.DataTable1DataTable.CreateInstance: System.Data.DataTable;
begin
    exit(new DataTable1DataTable());
end;

method Dataset1.DataTable1DataTable.InitVars;
begin
    self.columnID := inherited Columns['ID'];
    self.columnName := inherited Columns['Name'];
    self.columnDescription := inherited Columns['Description'];
end;

method Dataset1.DataTable1DataTable.InitClass;
begin
    self.columnID := new System.Data.DataColumn('ID', typeOf(System.Int32), nil, System.Data.MappingType.Element);
    inherited Columns.Add(self.columnID);
    self.columnName := new System.Data.DataColumn('Name', typeOf(System.String), nil, System.Data.MappingType.Element);
    inherited Columns.Add(self.columnName);
    self.columnDescription := new System.Data.DataColumn('Description', typeOf(System.String), nil, System.Data.MappingType.Element);
    inherited Columns.Add(self.columnDescription);
    self.Constraints.Add(new System.Data.UniqueConstraint('Constraint1', array of System.Data.DataColumn([self.columnID]), true));
    self.columnID.AllowDBNull := false;
    self.columnID.Unique := true;
    self.columnName.MaxLength := 20;
    self.columnDescription.MaxLength := 255;
end;

method Dataset1.DataTable1DataTable.NewDataTable1Row: DataTable1Row;
begin
    exit((self.NewRow() as DataTable1Row));
end;

method Dataset1.DataTable1DataTable.NewRowFromBuilder(builder: System.Data.DataRowBuilder): System.Data.DataRow;
begin
    exit(new DataTable1Row(builder));
end;

method Dataset1.DataTable1DataTable.GetRowType: System.Type;
begin
    exit(typeOf(DataTable1Row));
end;

method Dataset1.DataTable1DataTable.OnRowChanged(e: System.Data.DataRowChangeEventArgs);
begin
    inherited OnRowChanged(e);
    if (self.DataTable1RowChanged <> nil) then begin
        self.DataTable1RowChanged(self, new DataTable1RowChangeEvent((e.Row as DataTable1Row), e.Action));
    end;
end;

method Dataset1.DataTable1DataTable.OnRowChanging(e: System.Data.DataRowChangeEventArgs);
begin
    inherited OnRowChanging(e);
    if (self.DataTable1RowChanging <> nil) then begin
        self.DataTable1RowChanging(self, new DataTable1RowChangeEvent((e.Row as DataTable1Row), e.Action));
    end;
end;

method Dataset1.DataTable1DataTable.OnRowDeleted(e: System.Data.DataRowChangeEventArgs);
begin
    inherited OnRowDeleted(e);
    if (self.DataTable1RowDeleted <> nil) then begin
        self.DataTable1RowDeleted(self, new DataTable1RowChangeEvent((e.Row as DataTable1Row), e.Action));
    end;
end;

method Dataset1.DataTable1DataTable.OnRowDeleting(e: System.Data.DataRowChangeEventArgs);
begin
    inherited OnRowDeleting(e);
    if (self.DataTable1RowDeleting <> nil) then begin
        self.DataTable1RowDeleting(self, new DataTable1RowChangeEvent((e.Row as DataTable1Row), e.Action));
    end;
end;

method Dataset1.DataTable1DataTable.RemoveDataTable1Row(row: DataTable1Row);
begin
    self.Rows.Remove(row);
end;

class method Dataset1.DataTable1DataTable.GetTypedTableSchema(xs: System.Xml.Schema.XmlSchemaSet): System.Xml.Schema.XmlSchemaComplexType;
begin
    var &type: System.Xml.Schema.XmlSchemaComplexType := new System.Xml.Schema.XmlSchemaComplexType();
    var sequence: System.Xml.Schema.XmlSchemaSequence := new System.Xml.Schema.XmlSchemaSequence();
    var ds: Dataset1 := new Dataset1();
    var any1: System.Xml.Schema.XmlSchemaAny := new System.Xml.Schema.XmlSchemaAny();
    any1.Namespace := 'http://www.w3.org/2001/XMLSchema';
    any1.MinOccurs := new System.Decimal(0);
    any1.MaxOccurs := System.Decimal.MaxValue;
    any1.ProcessContents := System.Xml.Schema.XmlSchemaContentProcessing.Lax;
    sequence.Items.Add(any1);
    var any2: System.Xml.Schema.XmlSchemaAny := new System.Xml.Schema.XmlSchemaAny();
    any2.Namespace := 'urn:schemas-microsoft-com:xml-diffgram-v1';
    any2.MinOccurs := new System.Decimal(1);
    any2.ProcessContents := System.Xml.Schema.XmlSchemaContentProcessing.Lax;
    sequence.Items.Add(any2);
    var attribute1: System.Xml.Schema.XmlSchemaAttribute := new System.Xml.Schema.XmlSchemaAttribute();
    attribute1.Name := 'namespace';
    attribute1.FixedValue := ds.Namespace;
    &type.Attributes.Add(attribute1);
    var attribute2: System.Xml.Schema.XmlSchemaAttribute := new System.Xml.Schema.XmlSchemaAttribute();
    attribute2.Name := 'tableTypeName';
    attribute2.FixedValue := 'DataTable1DataTable';
    &type.Attributes.Add(attribute2);
    &type.Particle := sequence;
    var dsSchema: System.Xml.Schema.XmlSchema := ds.GetSchemaSerializable();
    if xs.Contains(dsSchema.TargetNamespace) then begin
        var s1: System.IO.MemoryStream := new System.IO.MemoryStream();
        var s2: System.IO.MemoryStream := new System.IO.MemoryStream();
        try
            var schema: System.Xml.Schema.XmlSchema := nil;
            dsSchema.Write(s1);
            var schemas: System.Collections.IEnumerator := xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
            ; 
            while schemas.MoveNext()do begin schema := (schemas.Current as System.Xml.Schema.XmlSchema);
                s2.SetLength(0);
                schema.Write(s2);
                if (s1.Length = s2.Length) then begin
                    s1.Position := 0;
                    s2.Position := 0;
                    ;
                    ; 
                    while ((s1.Position <> s1.Length) 
                                and (s1.ReadByte() = s2.ReadByte()))do begin ;
                        ;
                    end;
                    if (s1.Position = s1.Length) then begin
                        exit(&type);
                    end;
                end;
                ;
            end;
        finally
            if (s1 <> nil) then begin
                s1.Close();
            end;
            if (s2 <> nil) then begin
                s2.Close();
            end;
        end;
    end;
    xs.Add(dsSchema);
    exit(&type);
end;

{ DataTable1Row }

constructor Dataset1.DataTable1Row(rb: System.Data.DataRowBuilder);
begin
    inherited constructor(rb);
    self.tableDataTable1 := (self.Table as DataTable1DataTable);
end;

method Dataset1.DataTable1Row.get_ID: System.Int32;
begin
    exit((self[self.tableDataTable1.IDColumn] as System.Int32));
end;

method Dataset1.DataTable1Row.set_ID(value: System.Int32);
begin
    self[self.tableDataTable1.IDColumn] := value;
end;

method Dataset1.DataTable1Row.get_Name: System.String;
begin
    try
        exit((self[self.tableDataTable1.NameColumn] as System.String));
    except
        on e: System.InvalidCastException do begin
            raise new System.Data.StrongTypingException('The value for column ''Name'' in table ''DataTable1'' is DBNull.', e);
        end;
    end;
end;

method Dataset1.DataTable1Row.set_Name(value: System.String);
begin
    self[self.tableDataTable1.NameColumn] := value;
end;

method Dataset1.DataTable1Row.IsNameNull: System.Boolean;
begin
    exit(self.IsNull(self.tableDataTable1.NameColumn));
end;

method Dataset1.DataTable1Row.SetNameNull;
begin
    self[self.tableDataTable1.NameColumn] := System.Convert.DBNull;
end;

method Dataset1.DataTable1Row.get_Description: System.String;
begin
    try
        exit((self[self.tableDataTable1.DescriptionColumn] as System.String));
    except
        on e: System.InvalidCastException do begin
            raise new System.Data.StrongTypingException('The value for column ''Description'' in table ''DataTable1'' is DBNull.', e);
        end;
    end;
end;

method Dataset1.DataTable1Row.set_Description(value: System.String);
begin
    self[self.tableDataTable1.DescriptionColumn] := value;
end;

method Dataset1.DataTable1Row.IsDescriptionNull: System.Boolean;
begin
    exit(self.IsNull(self.tableDataTable1.DescriptionColumn));
end;

method Dataset1.DataTable1Row.SetDescriptionNull;
begin
    self[self.tableDataTable1.DescriptionColumn] := System.Convert.DBNull;
end;

{ DataTable1RowChangeEvent }

constructor Dataset1.DataTable1RowChangeEvent(row: DataTable1Row; action: System.Data.DataRowAction);
begin
    self.eventRow := row;
    self.eventAction := action;
end;

method Dataset1.DataTable1RowChangeEvent.get_Row: DataTable1Row;
begin
    exit(self.eventRow);
end;

method Dataset1.DataTable1RowChangeEvent.get_Action: System.Data.DataRowAction;
begin
    exit(self.eventAction);
end;

end.
